{"version":3,"sources":["components/layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","className","to","pathname","search","href","App","props","Fragment","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAGe,SAASA,IACtB,OACE,oCACE,yBAAKC,UAAU,iEACb,yBAAKA,UAAU,6EACb,kBAAC,IAAD,CAAMC,GAAI,CACRC,SAAU,IACVC,OAAQ,KAGV,yBAAKH,UAAU,8DAAf,6BAGA,yBAAKA,UAAU,cAAf,kCAIA,yBAAKA,UAAU,4EACb,uBAAGI,KAAK,+CAAR,+B,MCYGC,MAzBf,SAAaC,GACZ,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,IAAD,KACC,kBAACR,EAAD,MACA,yBAAKC,UAAU,mDACd,wBAAIA,UAAU,qCAAd,0EACA,uBAAGA,UAAU,SAAb,mLACA,qDAA0B,uBAAGA,UAAU,0BAA0BI,KAAK,4EAA4EI,OAAO,SAASC,IAAI,uBAA5I,8EAC1B,8DAAmC,uBAAGT,UAAU,0BAA0BI,KAAK,4EAA4EI,OAAO,SAASC,IAAI,uBAA5I,kFCLpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,oCACA,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDgInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e0ab2dc0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function Layout() {\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-col flex-wrap items-center justify-center pt-8 pb-4\">\r\n        <div className=\"flex items-end justify-center p-2 mt-2 border-b-2 border-gray-500 md:px-8\">\r\n          <Link to={{\r\n            pathname: \"/\",\r\n            search: \"\"\r\n          }}>\r\n\r\n          <div className=\"text-xl font-semibold tracking-tight uppercase md:text-2xl\">\r\n            Hollywood Handbook Search\r\n          </div>\r\n          <div className=\"text-base \">\r\n            unofficial transcript archive\r\n          </div>\r\n          </Link>\r\n          <div className=\"w-24 ml-4 text-xs leading-tight text-right text-blue-700 hover:underline\">\r\n            <a href=\"https://martenfrisk.github.io/seekerslounge\">\r\n              Teacher's Lounge search\r\n            </a>\r\n          </div>\r\n        </div>\r\n       \r\n      </div>\r\n      </>\r\n  )\r\n}","import React, { ReactElement } from 'react'\nimport { HashRouter as Router } from 'react-router-dom'\n\n// import Search from './components/search'\nimport Layout from './components/layout'\n// import Ep from './components/ep'\nimport './styles/main.css'\n\nfunction App(props: any): ReactElement {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Router>\n\t\t\t\t<Layout />\n\t\t\t\t<div className=\"container w-full px-2 mx-auto md:px-10 lg:w-1/2\">\n\t\t\t\t\t<h1 className=\"w-full mb-20 text-3xl text-center\">'Hollywood Handbook search' has shut down due to cost-related reasons.</h1>\n\t\t\t\t\t<p className=\"mb-10\">You can download the raw transcripts formatted for Elasticsearch here. Feel free to use them to make your own search engine or use something like Notepad++ to search the file.</p>\n\t\t\t\t\t<p>All lines (50mb json): <a className=\"underline font-blue-800\" href=\"https://mega.nz/file/vfhVEZYZ#6LyDl6JKXb2t6jogKzyNE-J5Izyi2BDy0r4fwTeP69U\" target=\"_blank\" rel=\"noopener noreferrer\">https://mega.nz/file/vfhVEZYZ#6LyDl6JKXb2t6jogKzyNE-J5Izyi2BDy0r4fwTeP69U</a></p>\n\t\t\t\t\t<p>All episode titles (20mb json): <a className=\"underline font-blue-800\" href=\"https://mega.nz/file/jf4h0DzA#hHGiaQW0oJsdcQfyi7EsyH4JnAzUZ_yc4XkZhwi5_rY\" target=\"_blank\" rel=\"noopener noreferrer\">https://mega.nz/file/jf4h0DzA#hHGiaQW0oJsdcQfyi7EsyH4JnAzUZ_yc4XkZhwi5_rY</a></p>\n\t\t\t\t\t{/* <Route exact path=\"/\">\n\t\t\t\t\t\t<Search />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/subreddit\">\n\t\t\t\t\t<Redirect to=\"/?q=subreddit\" />\n\t\t\t\t\t</Route>\n          <Route path=\"/ep/:ep\">\n            <Ep />\n          </Route> */}\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n// import { HashRouter as Router, Route } from 'react-router-dom'\n\nReactDOM.render(\n  <>\n\t\t<App />\n  </>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}